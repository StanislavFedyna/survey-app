/**
 * Creates an object composed of keys generated from the results of running
 * each element of `array` through `keyFn`. The corresponding value of each key
 * is the last element responsible for generating the key.
 *
 * @template A - The type of elements in the input array (must extend object).
 * @template K - The type of keys generated by the key function (must extend PropertyKey).
 *
 * @param {A[]} array - The array to iterate over.
 * @param {function(x: A): K} keyFn - The function to generate the key for each element.
 *
 * @returns {Record<A, K>} Returns the composed aggregate object.
 */
export function keyBy<A extends object, K extends PropertyKey>(
  array: A[],
  keyFn: (x: A) => K,
): Record<A, K> {
  return array.reduce(
    (r, x) => ({ ...r, [keyFn(x)]: x }),
    {} as { [P in K]: A },
  );
}
